<%

value = function(val, arg1) {
    if(val==null || val=='undefined'){
        return '---';
    }
    if (val instanceof Boolean || typeof val === 'boolean') {
        return val? 'Si':'No';
    }
    
    if (val instanceof Date) {
        return dateValue(val); 
    }

    if (typeof val === 'String' || typeof val === 'string'){
        if (isIso8601(val)){
            return dateValue(new Date(val))// Es una fecha
        }
        else{
            return titleCase(''+val);
        }
    }
    if (typeof val === 'number'){
        return titleCase(''+val);
    }

    if (arg1){
        const accesors = arg1.split('.');
        if (accesors.length) {
            const field = accesors.shift();
            return value(val[field], accesors.join('.'));
            //if (field in val){
            //    return value(val[field], accesors.join('.'));
            //}
        }
        else{ // Caso base
            if (arg1 in value){
                return value(val[arg1]); // Es un atributo de un objeto
            }    
        }
    }
    if (typeof val._str_ === 'function'){
        return titleCase(val._str_())
    }
    return titleCase(''+val);
}

label = function(value) {
    if(!value){
        return '---';
    } 
    const label = (((value.split('.')).pop()).match(/[A-Z]+[^A-Z]*|[^A-Z]+/g)).join(' ');
    return titleCase(label)
}

titleCase = function(str) {
    const title =str.toLowerCase().split(' ').map(function (word) {
        return (word.charAt(0).toUpperCase() + word.slice(1));
    }).join(' ');
    return title;
}

formatDate = function(date) {
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const year = date.getFullYear();
    return  day + "/" + month + "/" + year;
}

dateValue = function(date){
    const month = ("" + (date.getUTCMonth() + 1)).padStart(2, "0");
    const day = ("" + date.getUTCDate()).padStart(2, "0");
    const year = date.getUTCFullYear();
    return  day + "/" + month + "/" + year;
}

fullDateValue = function(date){
    if(date==null || date=='undefined'){
        return '---';
    }
    const month = ("" + (date.getUTCMonth() + 1)).padStart(2, "0");
    const day = ("" + date.getUTCDate()).padStart(2, "0");
    const year = date.getUTCFullYear();
    const hour = date.getUTCHours();
    const minutes = date.getUTCMinutes();
    return  day + "/" + month + "/" + year + " " + hour + ":" + minutes;
}

isIso8601 = function(value) {
    return new Date(value).toJSON() === value;
}


existArticulo = function(element){
    return element._id.articulo.toString() == this._id.toString() ;
}

mapTotalesPorArticulos = function(articulos, articulosAusencias){
    articulos = articulos.map(art => {
        const idx = articulosAusencias.findIndex(existArticulo, art);
        art = { 
            ausencias: (idx >= 0)? articulosAusencias[idx].ausenciasPorArticulo : 0,
            _id: art._id    
        }
        return art;
     })
     return articulos;
}

existAnio = function(element){
    const vigencia = ''+element.vigencia;
    const anio = ''+this;
    return vigencia == anio;
}

sumAcumuladorPorAnio = function(totalAcumulado, anio, tomados, resto){
    if (!totalAcumulado[anio]){
        totalAcumulado[anio] = { totalTomado : 0, totalResto: 0 };
    } 
    totalAcumulado[anio].totalTomado = totalAcumulado[anio].totalTomado + tomados
    totalAcumulado[anio].totalResto = totalAcumulado[anio].totalResto + resto
    return totalAcumulado
}

mapLicenciasPorAgenteAnio = function(anios, ausentismo){
    let totalAcumulado = 0;
    let totalResto = 0;
    anios = anios.map(anio => {
        const idx = ausentismo.findIndex(existAnio, anio);
        if (idx >= 0){
            const totales = ausentismo[idx].intervalos[0].totales;
            const ejecutadas = ausentismo[idx].intervalos[0].ejecutadas;
            anio = {
                anio :  anio, 
                tomados: ejecutadas? ejecutadas: 0,
                resto: totales - (ejecutadas? ejecutadas: 0)
            }
            totalAcumulado = totalAcumulado + anio.tomados;
            totalResto = totalResto + anio.resto;
        }
        else{
            anio = { 
                anio : anio,
                tomados: 0,
                resto: 0,

            }
        }
        return anio;
     })
     anios.push({ anio: "totales", tomados: totalAcumulado, resto: totalResto })
     return anios;
}



/**
* Used by agente-legajo.ejs
* Metodo de ayuda para recuperar la ultima baja del agente
**/
agenteBaja = function(agente){
    var bajas = agente.historiaLaboral.filter( value => value.tipo == 'baja');
    return (bajas && bajas.length)? bajas[0]:null;
}

%>